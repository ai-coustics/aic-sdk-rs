#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.71.1 */

pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const _CPP_CPPCONFIG_WRAPPER: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 15;
pub const __GLIBCXX__: u32 = 20250329;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_ASSERTIONS: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC23_SOURCE: u32 = 1;
pub const _ISOC2Y_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 17000;
pub const _PSTL_VERSION_MAJOR: u32 = 17;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TM_ZONE: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const __glibcxx_incomplete_container_elements: u32 = 201505;
pub const __glibcxx_uncaught_exceptions: u32 = 201411;
pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
pub const __glibcxx_is_null_pointer: u32 = 201309;
pub const __glibcxx_result_of_sfinae: u32 = 201210;
pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
pub const __glibcxx_is_swappable: u32 = 201603;
pub const __glibcxx_void_t: u32 = 201411;
pub const __glibcxx_enable_shared_from_this: u32 = 201603;
pub const __glibcxx_math_spec_funcs: u32 = 201003;
pub const __glibcxx_exchange_function: u32 = 201304;
pub const __glibcxx_integer_sequence: u32 = 201304;
pub const __glibcxx_integral_constant_callable: u32 = 201304;
pub const __glibcxx_is_final: u32 = 201402;
pub const __glibcxx_make_reverse_iterator: u32 = 201402;
pub const __glibcxx_null_iterators: u32 = 201304;
pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
pub const __glibcxx_transparent_operators: u32 = 201510;
pub const __glibcxx_tuple_element_t: u32 = 201402;
pub const __glibcxx_tuples_by_type: u32 = 201304;
pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __glibcxx_to_chars: u32 = 201611;
pub const __glibcxx_chrono_udls: u32 = 201304;
pub const __glibcxx_complex_udls: u32 = 201309;
pub const __glibcxx_generic_associative_lookup: u32 = 201304;
pub const __glibcxx_make_unique: u32 = 201304;
pub const __glibcxx_quoted_string_io: u32 = 201304;
pub const __glibcxx_shared_timed_mutex: u32 = 201402;
pub const __glibcxx_string_udls: u32 = 201304;
pub const __glibcxx_addressof_constexpr: u32 = 201603;
pub const __glibcxx_any: u32 = 201606;
pub const __glibcxx_apply: u32 = 201603;
pub const __glibcxx_as_const: u32 = 201510;
pub const __glibcxx_atomic_is_always_lock_free: u32 = 201603;
pub const __glibcxx_bool_constant: u32 = 201505;
pub const __glibcxx_byte: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __glibcxx_has_unique_object_representations: u32 = 201606;
pub const __glibcxx_hardware_interference_size: u32 = 201703;
pub const __glibcxx_invoke: u32 = 201411;
pub const __glibcxx_is_aggregate: u32 = 201703;
pub const __glibcxx_is_invocable: u32 = 201703;
pub const __glibcxx_launder: u32 = 201606;
pub const __glibcxx_logical_traits: u32 = 201510;
pub const __glibcxx_make_from_tuple: u32 = 201606;
pub const __glibcxx_not_fn: u32 = 201603;
pub const __glibcxx_type_trait_variable_templates: u32 = 201510;
pub const __glibcxx_variant: u32 = 202102;
pub const __glibcxx_lcm: u32 = 201606;
pub const __glibcxx_gcd: u32 = 201606;
pub const __glibcxx_gcd_lcm: u32 = 201606;
pub const __glibcxx_raw_memory_algorithms: u32 = 201606;
pub const __glibcxx_array_constexpr: u32 = 201803;
pub const __glibcxx_nonmember_container_access: u32 = 201411;
pub const __glibcxx_clamp: u32 = 201603;
pub const __glibcxx_sample: u32 = 201603;
pub const __glibcxx_boyer_moore_searcher: u32 = 201603;
pub const __glibcxx_chrono: u32 = 201611;
pub const __glibcxx_execution: u32 = 201902;
pub const __glibcxx_filesystem: u32 = 201703;
pub const __glibcxx_hypot: u32 = 201603;
pub const __glibcxx_map_try_emplace: u32 = 201411;
pub const __glibcxx_math_special_functions: u32 = 201603;
pub const __glibcxx_memory_resource: u32 = 201603;
pub const __glibcxx_node_extract: u32 = 201606;
pub const __glibcxx_parallel_algorithm: u32 = 201603;
pub const __glibcxx_scoped_lock: u32 = 201703;
pub const __glibcxx_shared_mutex: u32 = 201505;
pub const __glibcxx_shared_ptr_weak_type: u32 = 201606;
pub const __glibcxx_string_view: u32 = 201803;
pub const __glibcxx_unordered_map_try_emplace: u32 = 201411;
pub const __glibcxx_optional: u32 = 201606;
pub const __glibcxx_constexpr_char_traits: u32 = 201611;
pub const __glibcxx_constexpr_string: u32 = 201611;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
    pub fn std___glibcxx_assert_fail(
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
        __function: *const ::std::os::raw::c_char,
        __condition: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type std_byte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___byte_operand {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
pub type std___byte_op_t = std___byte_operand;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " Indicates that a function call was successful."]
pub const aic_AIC_PASS: u32 = 0;
#[doc = " Indicates that a function call failed for an unspecified reason."]
pub const aic_AIC_FAIL: u32 = 1;
#[doc = " Indicates that a function call failed because a null pointer was passed as an\n argument."]
pub const aic_AIC_FAIL_NULL_POINTER: u32 = 2;
pub const aic_LogLevel_Error: aic_LogLevel = 1;
pub const aic_LogLevel_Warn: aic_LogLevel = 2;
pub const aic_LogLevel_Debug: aic_LogLevel = 3;
pub const aic_LogLevel_Info: aic_LogLevel = 4;
pub const aic_LogLevel_Trace: aic_LogLevel = 5;
#[doc = " Levels for the log callback."]
pub type aic_LogLevel = u32;
#[doc = " The AicModel machine learning model for speech enhancement."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aic_AicModel {
    _unused: [u8; 0],
}
#[doc = " The SDK will call this function to allow the user to receive logs.\n The first parameter is a pointer to the log message, and the second parameter\n is the level of that log."]
pub type aic_LogCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: aic_LogLevel),
>;
unsafe extern "C" {
    #[doc = " @brief Set the license key for the SDK. This function has to be called before\n any other function in the SDK.\n\n @param license_key A pointer to the license key data.\n @param license_key_length The length of the license key data in bytes.\n @return AIC_PASS on success, or AIC_FAIL if the license key is invalid.\n @note This function must only be called once."]
    #[link_name = "\u{1}aic_register_license_key"]
    pub fn aic_aic_register_license_key(license_key: *const u8, license_key_length: usize) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Initializes the SDK logger.\n\n @param log_callback A callback function that the SDK will use to send log\n messages\n @return AIC_PASS on success, or AIC_FAIL if the SDK logging system was\n already initialized.\n @note This function must only be called once."]
    #[link_name = "\u{1}aic_log_init"]
    pub fn aic_aic_log_init(log_callback: aic_LogCallback) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Creates a new `AicModel`, using the machine learning model `Model S`.\n\n @return A pointer to the newly created `AicModel`."]
    #[link_name = "\u{1}aic_new_model_s"]
    pub fn aic_aic_new_model_s() -> *mut aic_AicModel;
}
unsafe extern "C" {
    #[doc = " @brief Creates a new `AicModel`, using the machine learning model `Model L`.\n Similar quality to Model L, but uses less CPU for the price of more Memory.\n\n @return A pointer to the newly created `AicModel`."]
    #[link_name = "\u{1}aic_new_model_l"]
    pub fn aic_aic_new_model_l() -> *mut aic_AicModel;
}
unsafe extern "C" {
    #[doc = " @brief Initializes the audio processing settings for the AicModel.\n\n @param model A pointer to the AicModel.\n @param num_channels The number of audio channels being processed.\n @param sample_rate The sample rate of the audio being processed.\n @param num_frames The number of audio frames processed per callback.\n @return AIC_PASS on success, or an error code on failure.\n @note This function has to be called before the process function."]
    #[link_name = "\u{1}aic_init"]
    pub fn aic_aic_init(
        model: *mut aic_AicModel,
        num_channels: usize,
        sample_rate: usize,
        num_frames: usize,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Processes a buffer of interleaved audio data using the AicModel.\n\n @param model A pointer to the AicModel.\n @param buffer A pointer to the audio data.\n @param num_channels The number of channels.\n @param num_frames The number of audio frames in the buffer.\n @return AIC_PASS on success, or an error code on failure.\n @note The buffer has to be `num_channels` * `num_frames` long."]
    #[link_name = "\u{1}aic_process_interleaved"]
    pub fn aic_aic_process_interleaved(
        model: *mut aic_AicModel,
        buffer: *mut f32,
        num_channels: usize,
        num_frames: usize,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Processes a multi-channel buffer of audio data using the AicModel.\n\n @param model A pointer to the AicModel.\n @param buffer A pointer to the audio data.\n @param num_channels The number of channels.\n @param num_frames The number of audio frames in the buffer.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_process_deinterleaved"]
    pub fn aic_aic_process_deinterleaved(
        model: *mut aic_AicModel,
        buffer: *const *mut f32,
        num_channels: usize,
        num_frames: usize,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Processes a multi-channel buffer of audio data using the AicModel.\n\n @param model A pointer to the AicModel.\n @param buffer A pointer to the audio data.\n @param num_channels The number of channels.\n @param num_frames The number of audio frames in the buffer.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_reset"]
    pub fn aic_aic_reset(model: *mut aic_AicModel) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Sets the enhancement strength for the AicModel.\n\n @param model A pointer to the AicModel.\n @param enhancement_strength Value between 0.0 and 1.0,\n where 0.0 is equal to a bypass and 1.0 is the maximum enhancement.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_set_enhancement_strength"]
    pub fn aic_aic_set_enhancement_strength(
        model: *mut aic_AicModel,
        enhancement_strength: f32,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Gets the current enhancement strength for the AicModel.\n\n @param model A pointer to the AicModel.\n @param enhancement_strength A pointer to the variable that will store the\n current strength.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_get_enhancement_strength"]
    pub fn aic_aic_get_enhancement_strength(
        model: *mut aic_AicModel,
        enhancement_strength: *mut f32,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Sets the voice gain parameter of the AicModel.\n This is the gain that is added to the extracted voice before\n the mixback to the original signal is happening.\n\n @param model A pointer to the AicModel.\n @param voice_gain The voice gain parameter to set.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_set_voice_gain"]
    pub fn aic_aic_set_voice_gain(model: *mut aic_AicModel, voice_gain: f32) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Gets the current voice gain parameter of the AicModel.\n This is the gain that is added to the extracted voice before the\n mixback to the original signal is happening.\n\n @param model A pointer to the AicModel.\n @param voice_gain A pointer to the variable that will store the voice gain\n parameter.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_get_voice_gain"]
    pub fn aic_aic_get_voice_gain(model: *mut aic_AicModel, voice_gain: *mut f32) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Gets the optimal number of frames for the AicModel.\n This is the native number of frames of the model, that causes\n the lowest latency.\n\n @param model A pointer to the AicModel.\n @param num_frames A pointer to the variable that will store the optimal\n number of frames.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_get_optimal_num_frames"]
    pub fn aic_aic_get_optimal_num_frames(model: *mut aic_AicModel, num_frames: *mut usize) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Gets the optimal sample rate for the AicModel.\n This is the native sample rate of the model,\n that causes the lowest latency.\n\n @param model A pointer to the AicModel.\n @param sample_rate A pointer to the variable that will store the optimal\n sample rate.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_get_optimal_sample_rate"]
    pub fn aic_aic_get_optimal_sample_rate(
        model: *mut aic_AicModel,
        sample_rate: *mut usize,
    ) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Gets the current latency of the full process in samples.\n\n @param model A pointer to the AicModel.\n @param latency A pointer to the variable that will store the latency value.\n @return AIC_PASS on success, or an error code on failure."]
    #[link_name = "\u{1}aic_get_latency"]
    pub fn aic_aic_get_latency(model: *mut aic_AicModel, latency: *mut usize) -> u32;
}
unsafe extern "C" {
    #[doc = " @brief Frees the memory used by the AicModel.\n\n @param model A pointer to the AicModel."]
    #[link_name = "\u{1}aic_free"]
    pub fn aic_aic_free(model: *mut aic_AicModel);
}
