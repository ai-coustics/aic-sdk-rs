name: Build

on:
  push:
    branches: [main]
    tags:
      - "*"
  pull_request:
    branches: [main]

jobs:
  build-and-run:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      AIC_SDK_LICENSE: ${{ secrets.AIC_SDK_LICENSE }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Visual C++ Redistributable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Download and install Visual C++ Redistributable x64
          Write-Host "Installing Visual C++ Redistributable..."
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vc_redist.x64.exe" -OutFile "vc_redist.x64.exe"
          Start-Process -FilePath "vc_redist.x64.exe" -ArgumentList "/quiet", "/norestart" -Wait
          
          # Verify installation
          Write-Host "Checking for VCRUNTIME140.dll..."
          $vcruntime = Get-ChildItem -Path "$env:WINDIR\System32\VCRUNTIME140.dll" -ErrorAction SilentlyContinue
          if ($vcruntime) {
            Write-Host "✅ VCRUNTIME140.dll found at: $($vcruntime.FullName)"
          } else {
            Write-Host "⚠️  VCRUNTIME140.dll not found in System32, but may be available via other paths"
          }
          
          # Check for Universal CRT components
          Write-Host "Checking for Universal CRT components..."
          $ucrtBase = Get-ChildItem -Path "$env:WINDIR\System32\ucrtbase.dll" -ErrorAction SilentlyContinue
          if ($ucrtBase) {
            Write-Host "✅ ucrtbase.dll found at: $($ucrtBase.FullName)"
          } else {
            Write-Host "⚠️  ucrtbase.dll not found"
          }
          
          # Check for api-ms-win-crt files (Universal CRT API sets)
          $crtFiles = Get-ChildItem -Path "$env:WINDIR\System32\api-ms-win-crt-*.dll" -ErrorAction SilentlyContinue
          if ($crtFiles) {
            Write-Host "✅ Found $($crtFiles.Count) Universal CRT API files"
            $crtFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "⚠️  Universal CRT API files not found, attempting to install..."
            # Try installing Windows SDK for Universal CRT
            try {
              choco install windows-sdk-10-version-2004-all --no-progress --yes
              Write-Host "✅ Windows SDK installed for Universal CRT support"
            } catch {
              Write-Host "⚠️  Could not install Windows SDK: $($_.Exception.Message)"
            }
          }
          
          # Ensure Windows Kits directory is in PATH for Universal CRT
          Write-Host "Adding Windows Kits to PATH for Universal CRT access..."
          $windowsKitsPath = "${env:ProgramFiles(x86)}\Windows Kits\10\Redist\ucrt\DLLs\x64"
          if (Test-Path $windowsKitsPath) {
            Write-Host "✅ Found Windows Kits UCRT path: $windowsKitsPath"
            $env:PATH = "$windowsKitsPath;$env:PATH"
          } else {
            Write-Host "⚠️  Windows Kits UCRT path not found at expected location"
            # Try alternative locations
            $altPaths = @(
              "${env:ProgramFiles}\Windows Kits\10\Redist\ucrt\DLLs\x64",
              "C:\Program Files (x86)\Windows Kits\10\Redist\10.0.19041.0\ucrt\DLLs\x64",
              "C:\Program Files\Windows Kits\10\Redist\10.0.19041.0\ucrt\DLLs\x64"
            )
            foreach ($altPath in $altPaths) {
              if (Test-Path $altPath) {
                Write-Host "✅ Found alternative UCRT path: $altPath"
                $env:PATH = "$altPath;$env:PATH"
                break
              }
            }
          }
          
          Write-Host "Visual C++ Redistributable installation completed"

      - name: Pre-runtime Check (Windows)
        if: matrix.os == 'windows-latest'
        env:
          # Ensure Universal CRT is accessible by adding all possible Windows Kits paths
          PATH: "C:\\Program Files (x86)\\Windows Kits\\10\\Redist\\ucrt\\DLLs\\x64;C:\\Program Files\\Windows Kits\\10\\Redist\\ucrt\\DLLs\\x64;C:\\Program Files (x86)\\Windows Kits\\10\\Redist\\10.0.19041.0\\ucrt\\DLLs\\x64;${{ env.PATH }}"
        run: |
          Write-Host "=== RUNTIME ENVIRONMENT CHECK ==="
          Write-Host "Current PATH includes Universal CRT: $($env:PATH -split ';' | Where-Object { $_ -like '*Windows Kits*' -or $_ -like '*ucrt*' })"
          
          # Verify Universal CRT files are accessible at runtime
          $requiredCRT = @("api-ms-win-crt-runtime-l1-1-0.dll", "api-ms-win-crt-math-l1-1-0.dll", "api-ms-win-crt-string-l1-1-0.dll")
          foreach ($req in $requiredCRT) {
            $found = $false
            foreach ($pathDir in ($env:PATH -split ';')) {
              if (Test-Path "$pathDir\$req") {
                Write-Host "✅ Found $req in: $pathDir"
                $found = $true
                break
              }
            }
            if (-not $found -and (Test-Path "$env:WINDIR\System32\$req")) {
              Write-Host "✅ Found $req in System32"
              $found = $true
            }
            if (-not $found) {
              Write-Host "❌ Missing: $req"
            }
          }

      - name: Add Universal CRT to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x64" >> $GITHUB_PATH
          echo "C:\Program Files\Windows Kits\10\Redist\ucrt\DLLs\x64" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Windows Kits\10\Redist\10.0.19041.0\ucrt\DLLs\x64" >> $GITHUB_PATH

      - name: Build and Run Example
        continue-on-error: true
        run: cargo run --example basic_usage --features download-lib

      - name: Post-build DLL Diagnostics (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "=== POST-BUILD DLL DIAGNOSTICS ==="
          
          # Comprehensive Universal CRT search
          Write-Host "Comprehensive Universal CRT file search..."
          $requiredCRT = @("api-ms-win-crt-runtime-l1-1-0.dll", "api-ms-win-crt-math-l1-1-0.dll", "api-ms-win-crt-string-l1-1-0.dll")
          $searchPaths = @(
            "$env:WINDIR\System32",
            "$env:WINDIR\SysWOW64",
            "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x64",
            "C:\Program Files\Windows Kits\10\Redist\ucrt\DLLs\x64",
            "C:\Program Files (x86)\Windows Kits\10\Redist\10.0.19041.0\ucrt\DLLs\x64",
            "C:\Program Files\Windows Kits\10\Redist\10.0.19041.0\ucrt\DLLs\x64"
          )
          
          $foundFiles = @{}
          foreach ($req in $requiredCRT) {
            $foundPaths = @()
            foreach ($searchPath in $searchPaths) {
              if (Test-Path "$searchPath\$req") {
                $foundPaths += $searchPath
              }
            }
            if ($foundPaths.Count -gt 0) {
              Write-Host "✅ $req found in:"
              $foundPaths | ForEach-Object { Write-Host "    - $_" }
              $foundFiles[$req] = $foundPaths
            } else {
              Write-Host "❌ $req not found in any search location"
            }
          }
          
          # Check if all required files are available
          if ($foundFiles.Count -eq $requiredCRT.Count) {
            Write-Host "✅ All required Universal CRT files found"
          } else {
            Write-Host "❌ Some Universal CRT files are missing"
          }
          
          # Check aic.dll accessibility after build
          Write-Host "Checking for aic.dll in target directories after build..."
          $targetDirs = @(
            "target\debug\aic.dll",
            "target\debug\examples\aic.dll",
            "target\debug\deps\aic.dll"
          )
          foreach ($dll in $targetDirs) {
            if (Test-Path $dll) {
              $size = (Get-Item $dll).Length
              Write-Host "✅ Found: $dll ($(($size/1MB).ToString('F1')) MB)"
            } else {
              Write-Host "❌ Missing: $dll"
            }
          }
          
          # Try to manually load aic.dll to get specific error
          Write-Host "Attempting to manually load aic.dll for detailed error..."
          try {
            if (Test-Path "target\debug\examples\aic.dll") {
              $dll = [System.Reflection.Assembly]::LoadFile((Resolve-Path "target\debug\examples\aic.dll").Path)
              Write-Host "✅ aic.dll loaded successfully via .NET"
            }
          } catch {
            Write-Host "❌ Failed to load aic.dll via .NET: $($_.Exception.Message)"
          }
          
          # Use dependency walker style check
          Write-Host "Checking what dependencies are missing..."
          if (Get-Command "dumpbin.exe" -ErrorAction SilentlyContinue) {
            if (Test-Path "target\debug\examples\aic.dll") {
              Write-Host "Using dumpbin to check dependencies..."
              dumpbin /DEPENDENTS "target\debug\examples\aic.dll"
            }
          } else {
            Write-Host "dumpbin not available for dependency checking"
          }
